using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using WebApiCharactersFilms.Handlers;
using WebApiCharactersFilms.Mail;
using WebApiCharactersFilms.Models;
using WebApiCharactersFilms.Repository.EntityDbContext;
using WebApiCharactersFilms.Repository.IRepositories;
using WebApiCharactersFilms.Repository.Repositories;
using WebApiCharactersFilms.Security;

namespace WebApiCharactersFilms
{
    public class Startup
    {
        public Startup(IConfiguration configuration) {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        private const string TitleAPI = "Web API Disney";
        public void ConfigureServices(IServiceCollection services) {
            //services.AddAutoMapper(typeof(Startup));
            services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
            services.AddScoped<IUsersHandler, UsersHandler>();
            services.AddScoped<ICharactersHandler, CharactersHandler>();
            services.AddScoped<IFilmsHandler, FilmsHandler>();
            services.AddScoped<IGenresHandler, GenresHandler>();

            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddScoped<IUserRepository, UserRepository>();
            services.AddScoped<ICharacterRepository, CharacterRepository>();
            services.AddScoped<IFilmRepository, FilmRepository>();
            services.AddScoped<IGenreRepository, GenreRepository>();
            services.AddScoped(typeof(IRepository<>), typeof(Repository<>));
            services.AddDbContext<AppDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString("WebApiDB")));

            services.Configure<MailSettings>(Configuration.GetSection("MailSettings"));
            services.AddTransient<IMailSender, MailSender>();

            services.Configure<SecuritySettings>(Configuration.GetSection("SecuritySettings")); 
            services.AddSingleton<ITokenJwt, TokenJwt>();
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
                .AddJwtBearer(options =>
                {
                    options.RequireHttpsMetadata = Configuration.GetValue<bool>("SecuritySettings:RequireHttpsMetadata");
                    options.SaveToken = Configuration.GetValue<bool>("SecuritySettings:SaveToken");
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = Configuration.GetValue<bool>("SecuritySettings:ValidateIssuer"),
                        ValidateAudience = Configuration.GetValue<bool>("SecuritySettings:ValidateAudience"),
                        ValidAudience = Configuration["SecuritySettings:ValidAudience"],
                        ValidIssuer = Configuration["SecuritySettings:ValidIssuer"],
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(Configuration["SecuritySettings:SecretKey"]))
                    };
                });

            services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = TitleAPI,
                    Version = "v1",
                    Description = "A example ASP.NET Core Web API by Dario Ramirez",
                    //TermsOfService = new Uri(""),
                    Contact = new OpenApiContact
                    {
                        Name = "Dario Ramirez",
                        Email = "dfr80@hotmail.com",
                        Url = new Uri("https://dfr80.com.ar"),
                    }
                });

                /*// Add xml comments generated by VStudio as description for the API endpoints.
                // (For complete configuration do this:
                //   1 - Right click on project.
                //   2 - Check "XML documentation file" in the 'Build' tab of the project properties.
                //   3 - Add ';1591' to the 'Supress warnings' field (Avoids warning to add XML comment on every public stuff!).
                    ejemplo
                    <PropertyGroup>
			            <GenerateDocumentationFile>true</GenerateDocumentationFile>
			            <NoWarn>$(NoWarn);1591</NoWarn>
		            </PropertyGroup>
                //  )*/

                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                options.IncludeXmlComments(xmlPath);

                options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description = "JWT token \r\n Ingrese 'Bearer' [space] y luego el token.\r\n\r\nEjemplo: \"Bearer 12345abcdef\"",
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    BearerFormat = "JWT",
                    Scheme = "Bearer"
                });

                options.AddSecurityRequirement(new OpenApiSecurityRequirement {
                    {
                        new OpenApiSecurityScheme {
                                Reference = new OpenApiReference {
                                    Id = "Bearer",
                                    Type = ReferenceType.SecurityScheme
                                }
                        },
                        new string[] {}
                    }
                });
            });

            services.AddControllers();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env) {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseSwagger();
            app.UseSwaggerUI(options =>
            {
                options.RoutePrefix = "swagger";
                options.SwaggerEndpoint(url: "/swagger/v1/swagger.json", TitleAPI);
            });

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
